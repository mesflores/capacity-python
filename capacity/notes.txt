Notes:
------

1/24 - Routing

When a user is generated, have to figure out how to get there. At a basic level
the traveler has to figure out where they are going and how to get there. For
this basic component, I think I can lean on networkx and just use the shortet
path between locations. Once we have that we have a sequence of stops that will
lead to the location.

So the question is: how to turn that sequence of stops into a choice of train?

First stab:
1) When a train enters:
    Check the train next stop ->
        If its not on path, do nothing
        If its on path, board train

2) When on a train arriving at new station
    If destination, exit and arrive
    If its on path:
        Is next step in path on train path?
            If no, alight, go to 1 (may have to figure out transfers)
            If yes, stay on train

1/25 -- Passanger stores

Ok before I can do that either, I need to fix the passanger generation and
storage so that they use stores instead of containers (since passangers are
real objects moving forward). This requires changes:

1) At the station object where passengers first arrive,
2) In the train when passengers board,
3) In the train when passengers alight.

1/26 - More Passenger stuff

Ok I need to figure out where some of these functions should live. In
particular, I'm thinking:

1) "Should board" - this function is used as a filter for the exit of the
   station store. It will do something like determine if the customer wants to
   use its route.

2) "Should alight" - same thing but from the other side: should I get off the
   train at this stop.

Since we cant see inside the store, this will need to happen without a view
into the passenger itself -- ie it will just need to decide true or false,
given a passenger and some set of conditions.

So with that in mind, I think it makes sense to have both functions live inside
the train object. Since it will need both as arguments though, it's all sort of
moot.

2/11 -- Station track resources

Need to re-work the way the run route loop works. Right now it needs to request
the station tracks twice, which is bad. It should do that at the start of its
loop.

2/19 - Stat tracking

Currently adding stat tracking to the traveler, in particular dumping the data
when the trip has finished. Once we have that, can add plotting functions to
see distributions spent in each state.

2/25 - Configuration specification and such

One of the goals to this system, is to be able to execute many "runs" with
different parameters, and then compare the results. In order to do that, it
needs two main modifications from where it is now:

1) Components of the system need to be pluggable. I.e. every component of the
   entire structure should be "swappable" depending on what you want to do.
   This would involve things like making the time between two stations depend
   on a delay model, a travel regime etc (or have sane defaults if none is
   specified.

2) A mechanism for outputting data into cohesive formats that can then be read
   and compared against one another.

In order to achieve both of these, I think the easiest to write will be to use
some kind of json specification format that allows you to select the models you
want. The output of each model will then be to some large "out data" directory
(not unlike the EC Cache simulator).

3/1 - Modules

In order to make it so modules can be loaded by name with the json, we will
need something that scans them all, then loads the appropriate ones (currently
thinking similar to how the Linux Kernel manages congestion control
algorithms). So each module (ie each method) is then a class. Each one has
a name, and a set of functions that might get called.

1) Do These need to be a class? could they just be functions that live in
   a dictionary?

2) The Important thing is ultimately that it be extensible without having to
   change the main simulator code. I.e. I should be able to just write a new
   model and then include it in the json.

3/19 - Modules and Configs

Module model described above seems to be working OK. Now trying to extend to
a more general purpose condig. Ideally, could eliminate the entire conf.py file
and make it totally driven by the config json. Currently exploring the best way
to manage the parsing of that.

4/2 - Catching Up

    Thoughts: Might need an independent way to specify full schedules. There is
    a reason the stop_times.txt GTFS file is so verbose. I think maybe we can
    do something similar. It might make sense to make a tool to easily edit
    them though, so you don't have to manually write so many lines.
    ~~~~~

    First: convert more hard coded parameters to models

5/12 - Adding other lines

    Currently the hardcoded expo stuff is annoying. As a starter, I want to add
    the ability to look at the GTFS runs and generate a very simple "route"
    object from it (that just does the line end to end). As a first pass, this
    will still ignore the scheduled times, and just create a single train for
    each run.

    Later, this will have to do something more clever, in particular to account
    for getting trains to the right place to start runs, etc.

6/27 - Automatic Routes

    Still implementing the described first step of building a full route based
    on what it sees.

    Generally speaking, however, there problem needs to be solved specifically:
    For some given schedule, how many trains do I need? And what constraints do
    I need specific knowledge of to make a good decision. So this is things
    like how often can we re-use a car, where are there physical turn aroudns,
    spaces for inter-run-serivice, etc.

    I wonder if there are good standard practices for answering some of those
    questions? APTA guides? This is literature worth digging up.

6/28 - Routes vs Trains
    
    As it stands the abstraction is called "train" but really it's a run. I'm
    getting hungup on trying to figure out how out of service trains should
    opperate, but really I want this to be sinpler at first pass. Instead let's
    just not worry about it, and start trains off on scheduled routes at
    scheduled times and see what happens. We still want live trains to pile up
    and compete for resources (stations, track, etc.), but jsut not worry about
    how many are necessary or how to get them to the right place.

7/1 - Routes Vs Trains

    Ok so here are the first steps to getting this to be straight forward:
        1) Look at the list of runs create a train with a list of stops that
           follows the list (This is still  the most annoiyng given how things
           are situated at the moment..
        2) Disable auto reversal of routes. When a train route ends just
           vanish.
        3) _Eventually_ the idea is that when a route ends a train should sit
           and wait (do nothing? Get out of the way?) Until a new route picks
           up from that locations. The train will then assume that route and
           pick up from there.

    Also going to only take routes from a single weekeday. Because it's
    relevant to my life route now, I'm going to say: 2 July 2018. As soon as
    route reading is working, we can make this generic, obviously.
